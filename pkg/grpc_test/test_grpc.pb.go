// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.23.2
// source: pkg/runner/grpc_test/test.proto

package grpc_test

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MainClient is the client API for Main service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MainClient interface {
	Unary(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*HelloReply, error)
	ClientStream(ctx context.Context, opts ...grpc.CallOption) (Main_ClientStreamClient, error)
	ServerStream(ctx context.Context, in *StreamMessageRepeated, opts ...grpc.CallOption) (Main_ServerStreamClient, error)
	BidStream(ctx context.Context, opts ...grpc.CallOption) (Main_BidStreamClient, error)
	TestBasicType(ctx context.Context, in *BasicType, opts ...grpc.CallOption) (*BasicType, error)
	TestAdvancedType(ctx context.Context, in *AdvancedType, opts ...grpc.CallOption) (*AdvancedType, error)
}

type mainClient struct {
	cc grpc.ClientConnInterface
}

func NewMainClient(cc grpc.ClientConnInterface) MainClient {
	return &mainClient{cc}
}

func (c *mainClient) Unary(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*HelloReply, error) {
	out := new(HelloReply)
	err := c.cc.Invoke(ctx, "/grpctest.Main/Unary", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mainClient) ClientStream(ctx context.Context, opts ...grpc.CallOption) (Main_ClientStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &Main_ServiceDesc.Streams[0], "/grpctest.Main/ClientStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &mainClientStreamClient{stream}
	return x, nil
}

type Main_ClientStreamClient interface {
	Send(*StreamMessage) error
	CloseAndRecv() (*StreamMessageRepeated, error)
	grpc.ClientStream
}

type mainClientStreamClient struct {
	grpc.ClientStream
}

func (x *mainClientStreamClient) Send(m *StreamMessage) error {
	return x.ClientStream.SendMsg(m)
}

func (x *mainClientStreamClient) CloseAndRecv() (*StreamMessageRepeated, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(StreamMessageRepeated)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *mainClient) ServerStream(ctx context.Context, in *StreamMessageRepeated, opts ...grpc.CallOption) (Main_ServerStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &Main_ServiceDesc.Streams[1], "/grpctest.Main/ServerStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &mainServerStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Main_ServerStreamClient interface {
	Recv() (*StreamMessage, error)
	grpc.ClientStream
}

type mainServerStreamClient struct {
	grpc.ClientStream
}

func (x *mainServerStreamClient) Recv() (*StreamMessage, error) {
	m := new(StreamMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *mainClient) BidStream(ctx context.Context, opts ...grpc.CallOption) (Main_BidStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &Main_ServiceDesc.Streams[2], "/grpctest.Main/BidStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &mainBidStreamClient{stream}
	return x, nil
}

type Main_BidStreamClient interface {
	Send(*StreamMessage) error
	Recv() (*StreamMessage, error)
	grpc.ClientStream
}

type mainBidStreamClient struct {
	grpc.ClientStream
}

func (x *mainBidStreamClient) Send(m *StreamMessage) error {
	return x.ClientStream.SendMsg(m)
}

func (x *mainBidStreamClient) Recv() (*StreamMessage, error) {
	m := new(StreamMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *mainClient) TestBasicType(ctx context.Context, in *BasicType, opts ...grpc.CallOption) (*BasicType, error) {
	out := new(BasicType)
	err := c.cc.Invoke(ctx, "/grpctest.Main/TestBasicType", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mainClient) TestAdvancedType(ctx context.Context, in *AdvancedType, opts ...grpc.CallOption) (*AdvancedType, error) {
	out := new(AdvancedType)
	err := c.cc.Invoke(ctx, "/grpctest.Main/TestAdvancedType", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MainServer is the server API for Main service.
// All implementations must embed UnimplementedMainServer
// for forward compatibility
type MainServer interface {
	Unary(context.Context, *Empty) (*HelloReply, error)
	ClientStream(Main_ClientStreamServer) error
	ServerStream(*StreamMessageRepeated, Main_ServerStreamServer) error
	BidStream(Main_BidStreamServer) error
	TestBasicType(context.Context, *BasicType) (*BasicType, error)
	TestAdvancedType(context.Context, *AdvancedType) (*AdvancedType, error)
	mustEmbedUnimplementedMainServer()
}

// UnimplementedMainServer must be embedded to have forward compatible implementations.
type UnimplementedMainServer struct {
}

func (UnimplementedMainServer) Unary(context.Context, *Empty) (*HelloReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Unary not implemented")
}
func (UnimplementedMainServer) ClientStream(Main_ClientStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method ClientStream not implemented")
}
func (UnimplementedMainServer) ServerStream(*StreamMessageRepeated, Main_ServerStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method ServerStream not implemented")
}
func (UnimplementedMainServer) BidStream(Main_BidStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method BidStream not implemented")
}
func (UnimplementedMainServer) TestBasicType(context.Context, *BasicType) (*BasicType, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TestBasicType not implemented")
}
func (UnimplementedMainServer) TestAdvancedType(context.Context, *AdvancedType) (*AdvancedType, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TestAdvancedType not implemented")
}
func (UnimplementedMainServer) mustEmbedUnimplementedMainServer() {}

// UnsafeMainServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MainServer will
// result in compilation errors.
type UnsafeMainServer interface {
	mustEmbedUnimplementedMainServer()
}

func RegisterMainServer(s grpc.ServiceRegistrar, srv MainServer) {
	s.RegisterService(&Main_ServiceDesc, srv)
}

func _Main_Unary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MainServer).Unary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpctest.Main/Unary",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MainServer).Unary(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Main_ClientStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MainServer).ClientStream(&mainClientStreamServer{stream})
}

type Main_ClientStreamServer interface {
	SendAndClose(*StreamMessageRepeated) error
	Recv() (*StreamMessage, error)
	grpc.ServerStream
}

type mainClientStreamServer struct {
	grpc.ServerStream
}

func (x *mainClientStreamServer) SendAndClose(m *StreamMessageRepeated) error {
	return x.ServerStream.SendMsg(m)
}

func (x *mainClientStreamServer) Recv() (*StreamMessage, error) {
	m := new(StreamMessage)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Main_ServerStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamMessageRepeated)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MainServer).ServerStream(m, &mainServerStreamServer{stream})
}

type Main_ServerStreamServer interface {
	Send(*StreamMessage) error
	grpc.ServerStream
}

type mainServerStreamServer struct {
	grpc.ServerStream
}

func (x *mainServerStreamServer) Send(m *StreamMessage) error {
	return x.ServerStream.SendMsg(m)
}

func _Main_BidStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MainServer).BidStream(&mainBidStreamServer{stream})
}

type Main_BidStreamServer interface {
	Send(*StreamMessage) error
	Recv() (*StreamMessage, error)
	grpc.ServerStream
}

type mainBidStreamServer struct {
	grpc.ServerStream
}

func (x *mainBidStreamServer) Send(m *StreamMessage) error {
	return x.ServerStream.SendMsg(m)
}

func (x *mainBidStreamServer) Recv() (*StreamMessage, error) {
	m := new(StreamMessage)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Main_TestBasicType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BasicType)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MainServer).TestBasicType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpctest.Main/TestBasicType",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MainServer).TestBasicType(ctx, req.(*BasicType))
	}
	return interceptor(ctx, in, info, handler)
}

func _Main_TestAdvancedType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdvancedType)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MainServer).TestAdvancedType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpctest.Main/TestAdvancedType",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MainServer).TestAdvancedType(ctx, req.(*AdvancedType))
	}
	return interceptor(ctx, in, info, handler)
}

// Main_ServiceDesc is the grpc.ServiceDesc for Main service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Main_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpctest.Main",
	HandlerType: (*MainServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Unary",
			Handler:    _Main_Unary_Handler,
		},
		{
			MethodName: "TestBasicType",
			Handler:    _Main_TestBasicType_Handler,
		},
		{
			MethodName: "TestAdvancedType",
			Handler:    _Main_TestAdvancedType_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ClientStream",
			Handler:       _Main_ClientStream_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "ServerStream",
			Handler:       _Main_ServerStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "BidStream",
			Handler:       _Main_BidStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "pkg/runner/grpc_test/test.proto",
}
